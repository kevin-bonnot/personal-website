/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import {Html, useGLTF} from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import Project from '../../../models/Project.ts';
import ProjectCard from '../../ProjectCard.tsx';
import {useControls} from 'leva';
import { useRef } from 'react';
import { Group } from 'three';

type GLTFResult = GLTF & {
  nodes: {
    Cube020: THREE.Mesh;
    Cube020_1: THREE.Mesh;
    Keyboard: THREE.Mesh;
    Keyboard_buttons: THREE.Mesh;
    Cube003: THREE.Mesh;
    Cube005: THREE.Mesh;
    Cube006: THREE.Mesh;
    Cube007: THREE.Mesh;
    Cube008: THREE.Mesh;
    Cube009: THREE.Mesh;
    Mouse: THREE.Mesh;
  };
  materials: {
    Monitor_Display: THREE.MeshStandardMaterial;
    Monitor_common: THREE.MeshPhysicalMaterial;
    Keyboard: THREE.MeshPhysicalMaterial;
    Keyboard_buttons: THREE.MeshPhysicalMaterial;
    Mouse: THREE.MeshPhysicalMaterial;
  };
};

type CustomProps = JSX.IntrinsicElements['group'] & {
  project: Project
};

export const ComputerModel = (props: CustomProps) => {
  const { nodes, materials } = useGLTF('/models/mac-draco.glb') as GLTFResult & any;

  const {positionX, positionY, positionZ, scaleX, scaleY} = useControls('HTML frames', {
    'positionX': {
      value: -0.95,
      min: -10,
      max: 10,
      step: 0.0001,
    },
    'positionY': {
      value: 0,
      min: -10,
      max: 10,
      step: 0.0001,
    },
    'positionZ': {
      value: 0.1,
      min: -10,
      max: 10,
      step: 0.0001,
    },
    'scaleX': {
      value: 0.75,
      min: 0,
      max: 2,
      step: 0.0001,
    },
    'scaleY': {
      value: 0.09,
      min: 0,
      max: 2,
      step: 0.0001,
    }
  });

  return (
    <group {...props} dispose={null}>
      <group rotation-x={-0.425} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
          <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />
          <mesh geometry={nodes['Cube008_2'].geometry}>
            {/* Drei's HTML component can "hide behind" canvas geometry */}
            <Html className="content" rotation-x={-Math.PI / 2} position={[0, 0.05, -0.09]} transform occlude>
              <div className="wrapper" onPointerDown={(e) => e.stopPropagation()}>
                <ProjectCard project={props.project} />
              </div>
            </Html>
          </mesh>
        </group>
      </group>
      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
      <group position={[0, -0.1, 3.39]}>
        <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
        <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
      </group>
      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
    </group>
  )

  // return (
  //   <group {...props} dispose={null}>
  //     <axesHelper />
  //     <group
  //       position={[0, 0, 0]}
  //       rotation={[Math.PI, 0, Math.PI]}
  //       scale={1.418}
  //     >
  //       <mesh
  //         castShadow
  //         receiveShadow
  //         geometry={nodes.Cube020.geometry}
  //         material={materials.Monitor_Display}
  //       />
  //         <Html transform position={[positionX, positionY, positionZ]} scale={[scaleX, scaleY, 1]} occlude>
  //           <div
              
  //           >
  //             <ProjectCard project={props.project}/>
  //           </div>
  //         </Html>
  //       <mesh
  //         castShadow
  //         receiveShadow
  //         geometry={nodes.Cube020_1.geometry}
  //         material={materials.Monitor_common}
  //       />
  //       <mesh
  //         castShadow
  //         receiveShadow
  //         geometry={nodes.Keyboard.geometry}
  //         material={materials.Keyboard}
  //         position={[-0.112, -0.851, 1.914]}
  //         rotation={[0, -0.019, 0]}
  //         scale={[0.705, 0.705, 0.541]}
  //       >
  //         <mesh
  //           castShadow
  //           receiveShadow
  //           geometry={nodes.Keyboard_buttons.geometry}
  //           material={materials.Keyboard_buttons}
  //           position={[-0.872, 0.064, -2.481]}
  //           scale={[3.788, 2.068, 4.942]}
  //         >
  //           <mesh
  //             castShadow
  //             receiveShadow
  //             geometry={nodes.Cube003.geometry}
  //             material={materials.Keyboard_buttons}
  //             position={[0.067, 0, 0]}
  //           />
  //           <mesh
  //             castShadow
  //             receiveShadow
  //             geometry={nodes.Cube005.geometry}
  //             material={materials.Keyboard_buttons}
  //             position={[0.22, 0, 0]}
  //           />
  //           <mesh
  //             castShadow
  //             receiveShadow
  //             geometry={nodes.Cube006.geometry}
  //             material={materials.Keyboard_buttons}
  //             position={[0.371, 0, 0]}
  //           />
  //           <mesh
  //             castShadow
  //             receiveShadow
  //             geometry={nodes.Cube007.geometry}
  //             material={materials.Keyboard_buttons}
  //             position={[0.044, 0, 0.059]}
  //           />
  //           <mesh
  //             castShadow
  //             receiveShadow
  //             geometry={nodes.Cube008.geometry}
  //             material={materials.Keyboard_buttons}
  //             position={[0.028, 0, 0.099]}
  //           />
  //           <mesh
  //             castShadow
  //             receiveShadow
  //             geometry={nodes.Cube009.geometry}
  //             material={materials.Keyboard_buttons}
  //             position={[0.045, 0, 0.139]}
  //           />
  //         </mesh>
  //       </mesh>
  //       <mesh
  //         castShadow
  //         receiveShadow
  //         geometry={nodes.Mouse.geometry}
  //         material={materials.Mouse}
  //         position={[1.119, -1.015, 0.957]}
  //         rotation={[0, -1.027, 0]}
  //         scale={0.705}
  //       />
  //     </group>
  //   </group>
  // );
};

useGLTF.preload('/Computer.glb');
