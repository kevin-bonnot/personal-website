/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import {Html, useGLTF} from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import Project from '../../../models/Project.ts';
import ProjectCard from '../../ProjectCard.tsx';
import {useControls} from "leva";

type GLTFResult = GLTF & {
  nodes: {
    Cube020: THREE.Mesh;
    Cube020_1: THREE.Mesh;
    Keyboard: THREE.Mesh;
    Keyboard_buttons: THREE.Mesh;
    Cube003: THREE.Mesh;
    Cube005: THREE.Mesh;
    Cube006: THREE.Mesh;
    Cube007: THREE.Mesh;
    Cube008: THREE.Mesh;
    Cube009: THREE.Mesh;
    Mouse: THREE.Mesh;
  };
  materials: {
    Monitor_Display: THREE.MeshStandardMaterial;
    Monitor_common: THREE.MeshPhysicalMaterial;
    Keyboard: THREE.MeshPhysicalMaterial;
    Keyboard_buttons: THREE.MeshPhysicalMaterial;
    Mouse: THREE.MeshPhysicalMaterial;
  };
};

type CustomProps = JSX.IntrinsicElements['group'] & {
  project: Project
};

export const ComputerModel = (props: CustomProps) => {
  const { nodes, materials } = useGLTF('/models/Computer.glb') as GLTFResult;

  const {positionX, positionY, positionZ, scaleX, scaleY} = useControls('HTML frames', {
    'positionX': {
      value: -0.95,
      min: -10,
      max: 10,
      step: 0.0001,
    },
    'positionY': {
      value: 0,
      min: -10,
      max: 10,
      step: 0.0001,
    },
    'positionZ': {
      value: 0.1,
      min: -10,
      max: 10,
      step: 0.0001,
    },
    'scaleX': {
      value: 0.75,
      min: 0,
      max: 2,
      step: 0.0001,
    },
    'scaleY': {
      value: 0.09,
      min: 0,
      max: 2,
      step: 0.0001,
    }
  });

  return (
    <group {...props} dispose={null}>
      <axesHelper />
      <group
        position={[0, 0, 0]}
        rotation={[Math.PI, 0, Math.PI]}
        scale={1.418}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube020.geometry}
          material={materials.Monitor_Display}
        />
          <Html transform position={[positionX, positionY, positionZ]} scale={[scaleX, scaleY, 1]} occlude>
            <div
              style={{
                position: 'absolute',
                width: 100,
                height: 100,
                backgroundColor: 'rgba(255, 255, 255, 0.8)',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                pointerEvents: 'none', // Cela permettra de cliquer à travers la div si nécessaire
              }}
            >
              <ProjectCard project={props.project}/>
            </div>
          </Html>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube020_1.geometry}
          material={materials.Monitor_common}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Keyboard.geometry}
          material={materials.Keyboard}
          position={[-0.112, -0.851, 1.914]}
          rotation={[0, -0.019, 0]}
          scale={[0.705, 0.705, 0.541]}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Keyboard_buttons.geometry}
            material={materials.Keyboard_buttons}
            position={[-0.872, 0.064, -2.481]}
            scale={[3.788, 2.068, 4.942]}
          >
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cube003.geometry}
              material={materials.Keyboard_buttons}
              position={[0.067, 0, 0]}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cube005.geometry}
              material={materials.Keyboard_buttons}
              position={[0.22, 0, 0]}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cube006.geometry}
              material={materials.Keyboard_buttons}
              position={[0.371, 0, 0]}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cube007.geometry}
              material={materials.Keyboard_buttons}
              position={[0.044, 0, 0.059]}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cube008.geometry}
              material={materials.Keyboard_buttons}
              position={[0.028, 0, 0.099]}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cube009.geometry}
              material={materials.Keyboard_buttons}
              position={[0.045, 0, 0.139]}
            />
          </mesh>
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mouse.geometry}
          material={materials.Mouse}
          position={[1.119, -1.015, 0.957]}
          rotation={[0, -1.027, 0]}
          scale={0.705}
        />
      </group>
    </group>
  );
};

useGLTF.preload('/Computer.glb');
